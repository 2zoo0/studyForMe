package hw03;

public class CircleQueue {
	// 큐 배열은 front와 rear 그리고 maxSize를 가진다.
	private int front;
	private int rear;
	private int maxSize;
	private Object[] queueArray;
	
	// 큐 배열 생성
	public CircleQueue(int maxSize){
		
		this.front = 0;
		this.rear = -1;
		
		// 실제 크기보다 하나 크게 지정한다 (공백과 포화를 막기 위함)
		this.maxSize = maxSize+1;	
		this.queueArray = new Object[this.maxSize];
	}
	
	// 큐가 비어있는지 확인
	public boolean empty(){
		return (front == rear+1) || (front+maxSize-1 == rear);
	}
	
	// 큐가 꽉 찼는지 확인
	public boolean full(){
		return (rear == maxSize-1) || (front+maxSize-2 == rear);
	}
	
	// 큐 rear에 데이터 등록
	public void push(Object item){
		
		if(full()) throw new ArrayIndexOutOfBoundsException();
		
		// rear 가 배열의 마지막이면 rear 포인터를 앞으로 돌린다.
		if(rear == maxSize-1){
			rear = -1;
		}
		queueArray[++rear] = item;
		System.out.println(item + "pushed!!");
	}
	
	// 큐에서 front 데이터 조회
	public Object peek(){
		
		if(empty()) throw new ArrayIndexOutOfBoundsException();
		
		System.out.println(queueArray[front] + "peeked!!");
		
		return queueArray[front];
	}
	
	// 큐에서 front 데이터 제거
	public Object remove(){
		
		System.out.println();
		Object item = peek();
		System.out.println(item + "removed!!");
		front++;
		
		// front의 다음 index가 배열크기+1 이면 처음으로 돌아간다
		if(front==maxSize){
			front = 0;
		}
		return item;
	}
	
	public static void main(String[] args) {
		CircleQueue Cq = new CircleQueue(5);
		Cq.push(4);
		Cq.push(3);
		Cq.push(2);
		Cq.push(1);
		
		Cq.peek();
		
		Cq.remove();
	}
}
